{"version":3,"sources":["SendbirdCallsModule.tsx"],"names":["SendbirdCallsModule","constructor","binder","noop","nativeModule","getConstants","NATIVE_SDK_VERSION","type","fileName","name","Platform","OS","idx","lastIndexOf","slice","addDirectCallSound","removeDirectCallSound","enabled","setDirectCallDialingSoundOnWhenSilentOrVibrateMode","_currentUser","getCurrentUser","currentUser","callId","callProps","getDirectCall","DirectCall","get","appId","initialized","applicationId","_init","Logger","debug","poolRelease","Room","addListener","CallsEvent","DEFAULT","data","DefaultEventType","ON_RINGING","_onRinging","initialize","_applicationId","_initialized","userId","accessToken","authenticate","deauthenticate","token","unique","registerPushToken","unregisterPushToken","registerVoIPPushToken","unregisterVoIPPushToken","routePickerView","handleFirebaseMessageData","params","queryKey","createDirectCallLogListQuery","DirectCallLogListQuery","NativeQueryType","DIRECT_CALL_LOG","createRoomListQuery","RoomListQuery","ROOM_LIST","VERSION","pkg","version","NATIVE_VERSION","RoomType","getOngoingCalls","dial","calleeUserId","isVideoCall","options","audioEnabled","frontCamera","videoEnabled","createRoom","roomType","then","props","fetchRoomById","roomId","getCachedRoomById","onRinging","listener"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\n\nimport pkg from '../../package.json';\nimport type {\n  CallOptions,\n  DirectCallLogQueryParams,\n  DirectCallProperties,\n  RoomListQueryParams,\n  SendbirdCallsJavascriptSpec,\n  User,\n} from '../types';\nimport { NativeConstants, NativeQueryType, RoomType, SoundType } from '../types';\nimport { noop } from '../utils';\nimport { Logger } from '../utils/logger';\nimport { DirectCallLogListQuery, RoomListQuery } from './BridgedQuery';\nimport { DirectCall } from './DirectCall';\nimport NativeBinder, { CallsEvent, DefaultEventType } from './NativeBinder';\nimport { Room } from './Room';\n\n/**\n * SendbirdCallsModule class for SendbirdCalls\n */\nexport default class SendbirdCallsModule implements SendbirdCallsJavascriptSpec {\n  constructor(private binder: NativeBinder) {}\n\n  private _applicationId = '';\n  private _initialized = false;\n  private _currentUser: User | null = null;\n  private _onRinging: (props: DirectCallProperties) => void = noop;\n\n  /**\n   * Returns current React-Native SDK version.\n   *\n   * @since 1.0.0\n   */\n  public get VERSION() {\n    return pkg.version;\n  }\n\n  /**\n   * Returns current iOS/Android SDK version.\n   *\n   * @since 1.0.0\n   */\n  public get NATIVE_VERSION() {\n    return this.getConstants()['NATIVE_SDK_VERSION'];\n  }\n\n  /**\n   * Returns the SDK Logger\n   *\n   * @since 1.0.0\n   */\n  public get Logger() {\n    return Logger;\n  }\n\n  /**\n   * Returns current application ID.\n   *\n   * @since 1.0.0\n   */\n  public get applicationId() {\n    return this._applicationId;\n  }\n\n  /**\n   * Returns is SDK initialized.\n   *\n   * @since 1.0.0\n   */\n  public get initialized() {\n    return this._initialized;\n  }\n\n  /**\n   * Gets the current `User`.\n   * Returns the current `User`. If SendBirdCall is not authenticated, `null` will be returned.\n   *\n   * @since 1.0.0\n   */\n  public get currentUser() {\n    return this._currentUser;\n  }\n\n  /**\n   * An enum that represents different types of a room.\n   * Returns {@link RoomType}\n   *\n   * @since 1.0.0\n   */\n  public get RoomType() {\n    return RoomType;\n  }\n\n  /**\n   * Gets the constants from React-Native Native module\n   * Returns the object\n   *\n   * @since 1.0.0\n   */\n  protected getConstants = (): NativeConstants => {\n    // @ts-ignore\n    return this.binder.nativeModule.getConstants?.() ?? { NATIVE_SDK_VERSION: '' };\n  };\n\n  /**\n   * Adds sound used in DirectCall such as ringtone and some sound effects with its file name with extension\n   *\n   * @iOS bundle file name\n   * @Android res/raw file name\n   *\n   * @since 1.0.0\n   */\n  public addDirectCallSound = (type: SoundType, fileName: string) => {\n    let name = fileName;\n    if (Platform.OS === 'android') {\n      const idx = fileName.lastIndexOf('.');\n      if (idx) name = fileName.slice(0, idx);\n    }\n    this.binder.nativeModule.addDirectCallSound(type, name);\n  };\n\n  /**\n   * Removes sound used in {@link DirectCall} with {@link SoundType} value.\n   *\n   * @since 1.0.0\n   */\n  public removeDirectCallSound = (type: SoundType) => {\n    this.binder.nativeModule.removeDirectCallSound(type);\n  };\n\n  /**\n   * Enables / disables dial sound used in {@link DirectCall} even when the device is in silent mode.\n   * Call this method right after {@link addDirectCallSound}.\n   *\n   * @since 1.0.0\n   */\n  public setDirectCallDialingSoundOnWhenSilentOrVibrateMode = (enabled: boolean) => {\n    this.binder.nativeModule.setDirectCallDialingSoundOnWhenSilentOrVibrateMode(enabled);\n  };\n\n  /**\n   * Gets the current `User` from native\n   * Returns the current `User`. If SendBirdCall is not authenticated, `null` will be returned.\n   *\n   * @since 1.0.0\n   */\n  public getCurrentUser = async () => {\n    this._currentUser = await this.binder.nativeModule.getCurrentUser();\n    return this.currentUser;\n  };\n\n  /**\n   * Returns all ongoing calls, including the active call and all calls on hold.\n   *\n   * @since 1.0.0\n   */\n  public getOngoingCalls(): Promise<DirectCallProperties[]> {\n    return this.binder.nativeModule.getOngoingCalls();\n  }\n\n  /**\n   * Gets call from call ID or call UUID\n   *\n   * @since 1.0.0\n   */\n  public getDirectCall = async (callId: string): Promise<DirectCall> => {\n    const callProps = await this.binder.nativeModule.getDirectCall(callId);\n    return DirectCall.get(this.binder, callProps);\n  };\n\n  /**\n   * Initializes SendbirdCalls.\n   *\n   * @since 1.0.0\n   */\n  public initialize = (appId: string) => {\n    if (this.initialized) {\n      if (this.applicationId !== appId) {\n        return this._init(appId);\n      } else {\n        return this.initialized;\n      }\n    } else {\n      return this._init(appId);\n    }\n  };\n\n  private _init = (appId: string) => {\n    this.Logger.debug('[SendbirdCalls]', 'initialize()');\n\n    DirectCall.poolRelease();\n    Room.poolRelease();\n\n    if (!this.initialized) {\n      this.binder.addListener(CallsEvent.DEFAULT, ({ type, data }) => {\n        if (type === DefaultEventType.ON_RINGING) {\n          this.Logger.debug('[SendbirdCalls]', 'onRinging', data.callId);\n          this._onRinging(data);\n        }\n      });\n    }\n\n    this.binder.nativeModule.initialize(appId);\n    this._applicationId = appId;\n    this._initialized = true;\n    return this.initialized;\n  };\n\n  /**\n   * Authenticates.\n   *\n   * @since 1.0.0\n   */\n  public authenticate = async (userId: string, accessToken: string | null = null) => {\n    this._currentUser = await this.binder.nativeModule.authenticate(userId, accessToken);\n    return this.currentUser as User;\n  };\n\n  /**\n   * Deauthenticates.\n   *\n   * @since 1.0.0\n   */\n  public deauthenticate = async () => {\n    await this.binder.nativeModule.deauthenticate();\n    this._currentUser = null;\n  };\n\n  /**\n   * Registers push token for current user.\n   *\n   * on iOS, push token means APNS token.\n   * on Android, push token means FCM token.\n   *\n   * ```ts\n   * if (Platform.OS === 'android') {\n   *   const fcmToken = await messaging().getToken();\n   *   await SendbirdCalls.registerPushToken(fcmToken);\n   * }\n   * if (Platform.OS === 'ios') {\n   *   const apnsToken = await messaging().getAPNSToken();\n   *   await SendbirdCalls.registerPushToken(apnsToken);\n   * }\n   * ```\n   *\n   * @since 1.0.0\n   */\n  public registerPushToken = async (token: string, unique = true) => {\n    await this.binder.nativeModule.registerPushToken(token, unique);\n  };\n\n  /**\n   * Unregisters push token for current user.\n   *\n   * @since 1.0.0\n   */\n  public unregisterPushToken = async (token: string) => {\n    await this.binder.nativeModule.unregisterPushToken(token);\n  };\n\n  /**\n   * Makes a call to user(callee) directly. (1:1 Call).\n   * Use the {@link CallOptions} object to choose initial call configuration (e.g. muted/unmuted)\n   *\n   * @since 1.0.0\n   */\n  public dial(\n    calleeUserId: string,\n    isVideoCall: boolean,\n    options: CallOptions = { audioEnabled: true, frontCamera: true, videoEnabled: true },\n  ): Promise<DirectCallProperties> {\n    return this.binder.nativeModule.dial(calleeUserId, isVideoCall, options);\n  }\n\n  /**\n   * Creates a {@link Room} for group calls.\n   *\n   * @since 1.0.0\n   */\n  public createRoom(roomType: RoomType): Promise<Room> {\n    return this.binder.nativeModule.createRoom(roomType).then((props) => Room.get(this.binder, props));\n  }\n\n  /**\n   * Fetches a room instance from Sendbird server.\n   *\n   * @since 1.0.0\n   */\n  public fetchRoomById(roomId: string): Promise<Room> {\n    return this.binder.nativeModule.fetchRoomById(roomId).then((props) => Room.get(this.binder, props));\n  }\n\n  /**\n   * Gets a locally-cached room instance by room ID.\n   *\n   * @since 1.0.0\n   */\n  public getCachedRoomById(roomId: string): Promise<Room | null> {\n    return this.binder.nativeModule\n      .getCachedRoomById(roomId)\n      .then((props) => (props ? Room.get(this.binder, props) : null));\n  }\n\n  /**\n   * To receive native-like calls while an app is in the background or closed, a device registration token must be registered to the server.\n   * Register a device push token after authentication has completed using the `SendbirdCalls.ios_registerVoIPPushToken()` method.\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  public ios_registerVoIPPushToken = async (token: string, unique = true) => {\n    if (Platform.OS !== 'ios') return;\n    await this.binder.nativeModule.registerVoIPPushToken(token, unique);\n  };\n\n  /**\n   * Unregisters a VoIP push token of specific device.\n   * You will not receive VoIP push notification for a call anymore.\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  public ios_unregisterVoIPPushToken = async (token: string) => {\n    if (Platform.OS !== 'ios') return;\n    await this.binder.nativeModule.unregisterVoIPPushToken(token);\n  };\n\n  /**\n   * Show-up a view that allows user to change the system audio route.\n   * [AVRoutePickerView](https://developer.apple.com/documentation/avkit/avroutepickerview) in iOS 11 or later\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  public ios_routePickerView = () => {\n    if (Platform.OS !== 'ios') return;\n    this.binder.nativeModule.routePickerView();\n  };\n\n  /**\n   * Handles Firebase message data.\n   * Returns true if SendBird call message. Otherwise false.\n   *\n   * @platform Android\n   * @since 1.0.0\n   */\n  public android_handleFirebaseMessageData = (data?: Record<string, string>) => {\n    if (Platform.OS !== 'android' || !data?.['sendbird_call']) {\n      return false;\n    } else {\n      this.binder.nativeModule.handleFirebaseMessageData(data);\n      return true;\n    }\n  };\n\n  /**\n   * Set onRinging listener\n   * A listener called when received dialing.\n   */\n  public onRinging(listener: (props: DirectCallProperties) => void) {\n    this._onRinging = listener;\n  }\n\n  /**\n   * Creates direct call log list query.\n   *\n   * @since 1.0.0\n   */\n  public createDirectCallLogListQuery = async (params: DirectCallLogQueryParams = {}) => {\n    const queryKey = await this.binder.nativeModule.createDirectCallLogListQuery(params);\n    return new DirectCallLogListQuery(queryKey, NativeQueryType.DIRECT_CALL_LOG, this.binder);\n  };\n\n  /**\n   * Creates a query for room list with specified parameters.\n   *\n   * @since 1.0.0\n   */\n  public createRoomListQuery = async (params: RoomListQueryParams = {}) => {\n    const queryKey = await this.binder.nativeModule.createRoomListQuery(params);\n    return new RoomListQuery(queryKey, NativeQueryType.ROOM_LIST, this.binder);\n  };\n}\n"]}